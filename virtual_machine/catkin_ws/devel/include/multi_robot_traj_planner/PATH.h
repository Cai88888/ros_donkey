// Generated by gencpp from file multi_robot_traj_planner/PATH.msg
// DO NOT EDIT!


#ifndef MULTI_ROBOT_TRAJ_PLANNER_MESSAGE_PATH_H
#define MULTI_ROBOT_TRAJ_PLANNER_MESSAGE_PATH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multi_robot_traj_planner
{
template <class ContainerAllocator>
struct PATH_
{
  typedef PATH_<ContainerAllocator> Type;

  PATH_()
    : pathX()
    , pathY()
    , pathZ()  {
    }
  PATH_(const ContainerAllocator& _alloc)
    : pathX(_alloc)
    , pathY(_alloc)
    , pathZ(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pathX_type;
  _pathX_type pathX;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pathY_type;
  _pathY_type pathY;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pathZ_type;
  _pathZ_type pathZ;





  typedef boost::shared_ptr< ::multi_robot_traj_planner::PATH_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_robot_traj_planner::PATH_<ContainerAllocator> const> ConstPtr;

}; // struct PATH_

typedef ::multi_robot_traj_planner::PATH_<std::allocator<void> > PATH;

typedef boost::shared_ptr< ::multi_robot_traj_planner::PATH > PATHPtr;
typedef boost::shared_ptr< ::multi_robot_traj_planner::PATH const> PATHConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_robot_traj_planner::PATH_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_robot_traj_planner::PATH_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_robot_traj_planner::PATH_<ContainerAllocator1> & lhs, const ::multi_robot_traj_planner::PATH_<ContainerAllocator2> & rhs)
{
  return lhs.pathX == rhs.pathX &&
    lhs.pathY == rhs.pathY &&
    lhs.pathZ == rhs.pathZ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_robot_traj_planner::PATH_<ContainerAllocator1> & lhs, const ::multi_robot_traj_planner::PATH_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_robot_traj_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multi_robot_traj_planner::PATH_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_robot_traj_planner::PATH_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_robot_traj_planner::PATH_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_robot_traj_planner::PATH_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_robot_traj_planner::PATH_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_robot_traj_planner::PATH_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_robot_traj_planner::PATH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4b6dd072e1420fea93c15a8167cfd2c";
  }

  static const char* value(const ::multi_robot_traj_planner::PATH_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4b6dd072e1420feULL;
  static const uint64_t static_value2 = 0xa93c15a8167cfd2cULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_robot_traj_planner::PATH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_robot_traj_planner/PATH";
  }

  static const char* value(const ::multi_robot_traj_planner::PATH_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_robot_traj_planner::PATH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] pathX\n"
"float32[] pathY\n"
"float32[] pathZ\n"
;
  }

  static const char* value(const ::multi_robot_traj_planner::PATH_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_robot_traj_planner::PATH_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pathX);
      stream.next(m.pathY);
      stream.next(m.pathZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PATH_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_robot_traj_planner::PATH_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_robot_traj_planner::PATH_<ContainerAllocator>& v)
  {
    s << indent << "pathX[]" << std::endl;
    for (size_t i = 0; i < v.pathX.size(); ++i)
    {
      s << indent << "  pathX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pathX[i]);
    }
    s << indent << "pathY[]" << std::endl;
    for (size_t i = 0; i < v.pathY.size(); ++i)
    {
      s << indent << "  pathY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pathY[i]);
    }
    s << indent << "pathZ[]" << std::endl;
    for (size_t i = 0; i < v.pathZ.size(); ++i)
    {
      s << indent << "  pathZ[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pathZ[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_ROBOT_TRAJ_PLANNER_MESSAGE_PATH_H
